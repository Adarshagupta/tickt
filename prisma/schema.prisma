// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  organizations OrganizationMember[]
  teams         TeamMember[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     OrganizationMember[]
  mainEvents  MainEvent[]
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model MainEvent {
  id              String    @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  venue           String?
  bannerImage     String?
  organizationId  String
  status          EventStatus @default(DRAFT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  subEvents       SubEvent[]
}

model SubEvent {
  id           String      @id @default(cuid())
  mainEventId  String
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  venue        String?
  capacity     Int?
  eventType    EventType   @default(GENERAL)
  price        Float       @default(0)
  status       EventStatus @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  mainEvent    MainEvent   @relation(fields: [mainEventId], references: [id], onDelete: Cascade)
  tickets      Ticket[]
  teams        Team[]
}

model Team {
  id          String   @id @default(cuid())
  name        String
  subEventId  String
  maxMembers  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subEvent    SubEvent     @relation(fields: [subEventId], references: [id])
  members     TeamMember[]
}

model TeamMember {
  id        String     @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole   @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Ticket {
  id           String       @id @default(cuid())
  subEventId   String
  userId       String
  ticketNumber String      @unique
  status       TicketStatus @default(PENDING)
  price        Float
  qrCode       String?
  checkedIn    Boolean      @default(false)
  checkedInAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  subEvent     SubEvent     @relation(fields: [subEventId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum TeamRole {
  LEADER
  MEMBER
}

enum EventType {
  GENERAL
  COMPETITION
  WORKSHOP
  PERFORMANCE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}
